type: edu
files:
  - name: test/ReadabilityTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.List;
      
      import static java.lang.Math.abs;
      
      
      class TestClue {
      
          int words;
          int sentences;
          int characters;
          int syllables;
          int polysyllables;
      
          double ari;
          double fkri;
          double smog;
          double cli;
      
          TestClue(int words,
                   int chars,
                   int sentences,
                   int syllables,
                   int polysyllables,
                   double ari,
                   double fkri,
                   double smog,
                   double cli) {
              this.words = words;
              this.sentences = sentences;
              this.characters = chars;
              this.syllables = syllables;
              this.polysyllables = polysyllables;
              this.ari = ari;
              this.fkri = fkri;
              this.smog = smog;
              this.cli = cli;
          }
      }
      
      
      public class ReadabilityTest extends StageTest<TestClue> {
      
          @Override
          public List<TestCase<TestClue>> generate() {
              return List.of(
                  new TestCase<TestClue>().setAttach(new TestClue(
                      108,
                      580,
                      6,
                      196,
                      20,
                      12.86,
                      12.84,
                      13.56,
                      14.13))
                      .addFile("input.txt",
                          "Readability is " +
                              "the ease with which a reader can " +
                              "understand a written text. In natural " +
                              "language, the readability of text depends " +
                              "on its content and its presentation. " +
                              "Researchers have used various factors " +
                              "to measure readability. Readability is " +
                              "more than simply legibility, which is a " +
                              "measure of how easily a reader can distinguish " +
                              "individual letters or characters from each other. " +
                              "Higher readability eases reading effort and speed " +
                              "for any reader, but it is especially important for " +
                              "those who do not have high reading comprehension. " +
                              "In readers with poor reading comprehension, raising " +
                              "the readability level of a text from mediocre to good " +
                              "can make the difference between success and failure")
                      .addArguments("input.txt")
                      .setInput("all"),
      
                  new TestCase<TestClue>().setAttach(new TestClue(
                      137,
                      687,
                      14,
                      210,
                      17,
                      7.08,
                      6.31,
                      9.42,
                      10.66))
                      .addFile("in.txt",
                          "This is the front page of the Simple English " +
                              "Wikipedia. Wikipedias are places where people work " +
                              "together to write encyclopedias in different languages. " +
                              "We use Simple English words and grammar here. The Simple " +
                              "English Wikipedia is for everyone! That includes children " +
                              "and adults who are learning English. There are 142,262 " +
                              "articles on the Simple English Wikipedia. All of the pages " +
                              "are free to use. They have all been published under both " +
                              "the Creative Commons License " +
                              "and the GNU Free Documentation License. You can help here! " +
                              "You may change these pages and make new pages. Read the help " +
                              "pages and other good pages to learn how to write pages here. " +
                              "If you need help, you may ask questions at Simple talk. Use " +
                              "Basic English vocabulary and shorter sentences. This allows " +
                              "people to understand normally complex terms or phrases.")
                      .addArguments("in.txt")
                      .setInput("all"),
      
                  new TestCase<TestClue>().setAttach(new TestClue(
                      180,
                      982,
                      13,
                      317,
                      34,
                      11.19,
                      10.59,
                      12.37,
                      14.14))
                      .addFile("in.txt",
                          "Gothic architecture are building designs, " +
                              "as first pioneered in Western Europe in the Middle Ages. " +
                              "It began in France in the 12th century. The Gothic style " +
                              "grew out of Romanesque architecture. It lasted until the " +
                              "16th century. By that time the Renaissance style of " +
                              "architecture had become popular. The important features " +
                              "of Gothic architecture are the pointed arch, the ribbed " +
                              "vault, the flying buttress, and stained glass windows " +
                              "which are explained below. " +
                              "Gothic architecture is best known as the style of many " +
                              "of the great cathedrals, abbeys and churches of Europe. " +
                              "It is also the architecture of many castles, palaces, " +
                              "town halls, universities, and also some houses. " +
                              "Many church buildings still remain from this period. " +
                              "Even the smallest Gothic churches are often very beautiful, " +
                              "while many of the larger churches and cathedrals are " +
                              "thought to be priceless works of art. Many are listed " +
                              "with the United Nations Educational, Scientific and " +
                              "Cultural Organization (UNESCO) as World Heritage Sites. " +
                              "In the 19th century, the Gothic style became popular " +
                              "again, particularly for building churches and universities. " +
                              "This style is called Gothic Revival architecture.")
                      .addArguments("in.txt")
                      .setInput("all")
              );
          }
      
          @Override
          public CheckResult check(String reply, TestClue clue) {
      
              reply = reply.replace("â€“", "-");
      
              boolean foundWords = false;
              boolean foundSentences = false;
              boolean foundChars = false;
              boolean foundSyllables = false;
              boolean foundPolysyllables = false;
      
              boolean foundARI = false;
              boolean foundFKT = false;
              boolean foundSMG = false;
              boolean foundCLI = false;
      
              for (Object lineObj : reply.lines().toArray()) {
                  String initialLine = (String) lineObj;
                  String line = initialLine.toLowerCase();
                  if (line.contains("words:")) {
      
                      CheckResult wrongAnswer = new CheckResult(false, "Can't parse words count!" +
                          "\nYour output format should be like in examples.");
                      foundWords = true;
      
                      String[] parsedLine = line.split(":");
                      if (parsedLine.length != 2) {
                          return wrongAnswer;
                      }
      
                      int words;
                      try {
                          words = (int) Double.parseDouble(parsedLine[1].strip());
                      } catch (NumberFormatException ignored) {
                          return wrongAnswer;
                      }
      
                      if (abs(words - clue.words) > 5) {
                          return new CheckResult(false,
                              "Wrong number of words. " +
                                  "Should be " + clue.words + ", but found " + words);
                      }
                  }
                  if (line.contains("sentences:")) {
      
                      CheckResult wrongAnswer = new CheckResult(false, "Can't parse sentences count!" +
                          "\nYour output format should be like in examples.");
                      foundSentences = true;
      
                      String[] parsedLine = line.split(":");
                      if (parsedLine.length != 2) {
                          return wrongAnswer;
                      }
      
                      int sentences;
                      try {
                          sentences = (int) Double.parseDouble(parsedLine[1].strip());
                      } catch (NumberFormatException ignored) {
                          return wrongAnswer;
                      }
      
                      if (abs(sentences - clue.sentences) > 1) {
                          return new CheckResult(false,
                              "Wrong number of sentences. " +
                                  "Should be " + clue.sentences + ", but found " + sentences);
                      }
                  }
                  if (line.contains("characters:")) {
      
                      CheckResult wrongAnswer = new CheckResult(false, "Can't parse characters count!" +
                          "\nYour output format should be like in examples.");
                      foundChars = true;
      
                      String[] parsedLine = line.split(":");
                      if (parsedLine.length != 2) {
                          return wrongAnswer;
                      }
      
                      int characters;
                      try {
                          characters = (int) Double.parseDouble(parsedLine[1].strip());
                      } catch (NumberFormatException ignored) {
                          return wrongAnswer;
                      }
      
                      if (abs(characters - clue.characters) > 10) {
                          return new CheckResult(false,
                              "Wrong number of characters. " +
                                  "Should be " + clue.characters + ", but found " + characters);
                      }
                  }
                  if (line.contains("polysyllables:")) {
      
                      CheckResult wrongAnswer = new CheckResult(false, "Can't parse polysyllables count!" +
                          "\nYour output format should be like in examples.");
                      foundPolysyllables = true;
      
                      String[] parsedLine = line.split(":");
                      if (parsedLine.length != 2) {
                          return wrongAnswer;
                      }
      
                      int polysyllables;
                      try {
                          polysyllables = (int) Double.parseDouble(parsedLine[1].trim());
                      } catch (NumberFormatException ignored) {
                          return wrongAnswer;
                      }
      
                      if (abs(polysyllables - clue.polysyllables) > 5) {
                          return wrongAnswer;
                      }
      
                  } else if (line.contains("syllables:")) {
      
                      CheckResult wrongAnswer = new CheckResult(false, "Can't parse syllables count!" +
                          "\nYour output format should be like in examples.");
                      foundSyllables = true;
      
                      String[] parsedLine = line.split(":");
                      if (parsedLine.length != 2) {
                          return wrongAnswer;
                      }
      
                      int syllables;
                      try {
                          syllables = (int) Double.parseDouble(parsedLine[1].strip());
                      } catch (NumberFormatException ignored) {
                          return wrongAnswer;
                      }
      
                      if (abs(syllables - clue.syllables) > 20) {
                          return new CheckResult(false,
                              "Wrong number of syllables. " +
                                  "Should be " + clue.syllables + ", but found " + syllables);
                      }
                  }
      
                  if (line.startsWith("automated readability index")) {
                      foundARI = true;
                      int rounded = (int) clue.ari;
                      String actual = Integer.toString(rounded);
                      String before = Integer.toString(rounded - 1);
                      String after = Integer.toString(rounded + 1);
                      if (!(line.contains(actual)
                          || line.contains(before)
                          || line.contains(after))) {
                          return new CheckResult(false,
                              "Wrong Automated Readability Index score. " +
                                  "Should be around " + clue.ari + ", your output:\n" + initialLine);
                      }
                      if (!line.contains("year") && !line.contains("old")) {
                          return new CheckResult(false,
                              "No age in Automated Readability Index");
                      }
                  }
      
                  if (line.startsWith("flesch-kincaid")) {
                      foundFKT = true;
                      int rounded = (int) clue.fkri;
                      String actual = Integer.toString(rounded);
                      String before = Integer.toString(rounded - 1);
                      String after = Integer.toString(rounded + 1);
                      if (!(line.contains(actual)
                          || line.contains(before)
                          || line.contains(after))) {
                          return new CheckResult(false,
                              "Wrong Flesch-Kincaid score. " +
                                  "Should be around " + clue.fkri + ", your output:\n" + initialLine);
                      }
                      if (!line.contains("year") && !line.contains("old")) {
                          return new CheckResult(false,
                              "No age in Flesch-Kincaid");
                      }
                  }
      
                  if (line.startsWith("simple measure of gobbledygook")) {
                      foundSMG = true;
                      int rounded = (int) clue.smog;
                      String actual = Integer.toString(rounded);
                      String before = Integer.toString(rounded - 1);
                      String after = Integer.toString(rounded + 1);
                      if (!(line.contains(actual)
                          || line.contains(before)
                          || line.contains(after))) {
                          return new CheckResult(false,
                              "Wrong Simple Measure of Gobbledygook score. " +
                                  "Should be around " + clue.smog + ", your output:\n" + initialLine);
                      }
                      if (!line.contains("year") && !line.contains("old")) {
                          return new CheckResult(false,
                              "No age in Simple Measure of Gobbledygook");
                      }
                  }
      
                  if (line.startsWith("coleman-liau")) {
                      foundCLI = true;
                      int rounded = (int) clue.cli;
                      String actual = Integer.toString(rounded);
                      String before = Integer.toString(rounded - 1);
                      String after = Integer.toString(rounded + 1);
                      if (!(line.contains(actual)
                          || line.contains(before)
                          || line.contains(after))) {
                          return new CheckResult(false,
                              "Wrong Coleman-Liau score. " +
                                  "Should be around " + clue.cli + ", your output:\n" + initialLine);
                      }
                      if (!line.contains("year") && !line.contains("old")) {
                          return new CheckResult(false,
                              "No age in Coleman-Liau");
                      }
                  }
              }
      
              if (!foundWords) {
                  return new CheckResult(false,
                      "There is no words amount");
              }
      
              if (!foundSentences) {
                  return new CheckResult(false,
                      "There is no sentences amount");
              }
      
              if (!foundChars) {
                  return new CheckResult(false,
                      "There is no characters amount");
              }
      
              if (!foundSyllables) {
                  return new CheckResult(false,
                      "There is no syllables in output");
              }
      
              if (!foundPolysyllables) {
                  return new CheckResult(false,
                      "There is no polysyllables in output");
              }
      
              if (!foundARI) {
                  return new CheckResult(false,
                      "There is no Automated Readability Index in output");
              }
      
              if (!foundFKT) {
                  return new CheckResult(false,
                      "There is no Flesch-Kincaid readability tests in output");
              }
      
              if (!foundSMG) {
                  return new CheckResult(false,
                      "There is no Simple Measure of Gobbledygook in output");
              }
      
              if (!foundCLI) {
                  return new CheckResult(false,
                      "There is no Coleman-Liau index in output");
              }
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/readability/main/Main.java
    visible: true
    text: |
      package readability.main;
      
      import readability.commandLine.CommandLineValidator;
      import readability.file.FileUtils;
      import readability.file.FileValidator;
      import readability.io.input.UserInputManager;
      import readability.text.TextManager;
      
      import java.io.File;
      import java.io.IOException;
      
      
      public class Main {
          public static void main(String[] args) {
              // Validate that there is an argument passed through the command-line
              if (!CommandLineValidator.isValidArgument(args.length)) {
                  System.out.println("Please provide a file path as a command-line argument.");
                  return;
              }
      
              // The Potential file path as a string
              String potentialFilePath = args[0];
      
              // Validate the potential file path
              if (!FileValidator.isValidFilePath(potentialFilePath)) {
                  System.out.println("Invalid file path! Please provide a valid file path");
                  return;
              }
      
              // Actual file
              File filePath = new File(potentialFilePath);
              String fileContent;
      
              try {
                  // Read the file content
                  fileContent = FileUtils.readFileAsString(filePath);
              } catch (IOException e) {
                  System.err.println("An IOException occurred: " + e.getMessage());
                  return;
              }
      
              // Create a TextManager object with the file content (Stores all info for the text file)
              TextManager text = new TextManager(fileContent);
      
              // Print the text info
              System.out.println("Words: " + text.getTotalWords());
              System.out.println("Sentences: " + text.getTotalSentences());
              System.out.println("Characters: " + text.getTotalCharacters());
              System.out.println("The score is: " + text.getScore());
              System.out.println("This text should be understood by " + text.getAgeGroup() + " year-olds.");
      
              UserInputManager.closeScanner();
      
          }
      }
    learner_created: true
  - name: src/readability/text/TextProperties.java
    visible: true
    text: |
      package readability.text;
      
      import readability.Regex.SentenceRegex;
      import readability.Regex.WordRegex;
      import readability.text.TextManager;
      
      import java.util.Arrays;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class TextProperties {
      
          public static double averageWordCount(String text) {
              // Create regex for sentence end and for defining words.
              String sentenceRegex = SentenceRegex.getSentenceRegex();
      
              // Split test into sentences
              String[] sentences = text.split(sentenceRegex);
      
              // Define word pattern
              Pattern wordPattern = Pattern.compile(WordRegex.getWordRegex());
      
              // Total sentences and total words
              int totalSentences = sentences.length;
              int totalWords = 0;
      
              // Count each word in each sentence
              for (String sentence : sentences) {
                  // create matcher object for each sentence to find words that match the pattern.
                  Matcher matcher = wordPattern.matcher(sentence);
      
                  // when a match is found, total words increase.
                  while (matcher.find()) {
                      totalWords++;
                  }
              }
      
              return (double) totalWords / totalSentences;
          }
      
          public static int wordCount(String text) {
              // Clean the text
              String cleanedText = text.replaceAll("[',]", "");
      
              // Prepare the mather with the regex on the cleaned text
              String wordRegex = WordRegex.getWordRegex();
              Pattern pattern = Pattern.compile(wordRegex);
              Matcher matcher = pattern.matcher(cleanedText);
      
              int totalWords = 0;
              while (matcher.find()) {
                  totalWords++;
              }
              return totalWords;
          }
      
          public static int characterCount(String text) {
              int count = 0;
              for (Character character : text.toCharArray()) {
                  if (!Character.isWhitespace(character)) {
                      count++;
                  }
              }
              return count;
          }
      
          public static int sentenceCount(String text) {
              String sentenceRegex = SentenceRegex.getSentenceRegex();
              String[] sentences = text.trim().split(sentenceRegex);
      
              return sentences.length;
          }
      
          public static String ageGroupCalculation(double score) {
              int roundedScore = (int)(Math.ceil(score));
      
              System.out.println(roundedScore);
              switch (roundedScore) {
                  case 1 -> {
                      return "5-6";
                  }
                  case 2 -> {
                      return "6-7";
                  }
                  case 3-> {
                      return "7-8";
                  }
                  case 4 -> {
                      return "8-9";
                  }
                  case 5 -> {
                      return "9-10";
                  }
                  case 6 -> {
                      return "10-11";
                  }
                  case 7 -> {
                      return "11-12";
                  }
                  case 8 -> {
                      return "12-13";
                  }
                  case 9 -> {
                      return "13-14";
                  }
                  case 10 -> {
                      return "14-15";
                  }
                  case 11 -> {
                      return "15-16";
                  }
                  case 12 -> {
                      return "16-17";
                  }
                  case 13 -> {
                      return "17-18";
                  } case 14 -> {
                      return "18-22";
                  }
                  default -> {
                      return "18+";
                  }
              }
      
          }
      }
    learner_created: true
  - name: src/readability/text/TextManager.java
    visible: true
    text: |
      package readability.text;
      
      import readability.calculate.AutomatedReadabilityIndex;
      
      public class TextManager {
      
          // INSTANCE VARIABLES
          private String text;
          private int totalCharacters;
          private int totalWords;
          private int totalSentences;
          private double score;
          private String ageGroup;
      
          // CONSTRUCTOR
          public TextManager(String text) {
              this.text = text;
      
              // Initialise the rest through calculations
              initialiseValues();
          }
      
      
          // GETTERS & SETTERS
          public String getText() {
              return text;
          }
      
          public void setText(String text) {
              this.text = text;
          }
      
          public int getTotalCharacters() {
              return totalCharacters;
          }
      
          public void setTotalCharacters(int totalCharacters) {
              this.totalCharacters = totalCharacters;
          }
      
          public int getTotalWords() {
              return totalWords;
          }
      
          public void setTotalWords(int totalWords) {
              this.totalWords = totalWords;
          }
      
          public int getTotalSentences() {
              return totalSentences;
          }
      
          public void setTotalSentences(int totalSentences) {
              this.totalSentences = totalSentences;
          }
      
          public double getScore() {
              return score;
          }
      
          public void setScore(double score) {
              this.score = score;
          }
      
          public String getAgeGroup() {
              return ageGroup;
          }
      
          public void setAgeGroup(String ageGroup) {
              this.ageGroup = ageGroup;
          }
      
      
          private void initialiseValues() {
              this.totalCharacters = TextProperties.characterCount(this.text);
              this.totalWords = TextProperties.wordCount(this.text);
              this.totalSentences =  TextProperties.sentenceCount(this.text);
              this.score = AutomatedReadabilityIndex.calculateAutomatedReadabilityIndex(totalCharacters
                      , totalWords, totalSentences);
              this.ageGroup = TextProperties.ageGroupCalculation(score);
          }
      
      
      }
    learner_created: true
  - name: src/readability/Regex/SentenceRegex.java
    visible: true
    text: |
      package readability.Regex;
      
      public class SentenceRegex {
          // INSTANCE VARIABLES
          private static String sentenceRegex ="[.?!]";
      
          // GETTERS AND SETTERS
          public static String getSentenceRegex() {
              return sentenceRegex;
          }
      
          public static void setSentenceRegex(String sentenceRegex) {
              SentenceRegex.sentenceRegex = sentenceRegex;
          }
      }
    learner_created: true
  - name: src/readability/calculate/AutomatedReadabilityIndex.java
    visible: true
    text: |
      package readability.calculate;
      
      import readability.main.Main;
      
      public class AutomatedReadabilityIndex {
      
          public static double calculateAutomatedReadabilityIndex(int characters, int words,
                                                                  int sentences) {
      
              double charactersPerWord = (double) characters / words;
              double wordsPerSentence = (double) words / sentences;
      
              double calculation =  4.71 * charactersPerWord + 0.5 * wordsPerSentence - 21.43;
      
              // Round to two decimal places.
              return Math.ceil(calculation * 100.00) / 100.00;
          }
      }
    learner_created: true
  - name: src/readability/file/FileValidator.java
    visible: true
    text: |
      package readability.file;
      
      import java.io.File;
      
      public class FileValidator {
      
          /**
           * Checks if the file exists and is a file.
           *
           * @param filePath The path to check
           * @return True if the path is a file and exists; false otherwise
           */
          public static boolean isValidFilePath(String filePath) {
              File path = new File(filePath);
              return (path.exists()) && (path.isFile());
          }
      }
    learner_created: true
  - name: src/readability/file/FileUtils.java
    visible: true
    text: |
      package readability.file;
      
      import java.io.File;
      import java.io.FileReader;
      import java.io.IOException;
      import java.util.Scanner;
      
      public class FileUtils {
      
          /**
           * Reads the content of a file and returns it as a String.
           *
           * @param filePath The path to the file.
           * @return The content of the file as a String.
           * @throws IOException If an I/O error occurs.
           */
          public static String readFileAsString(File filePath) throws IOException {
              StringBuilder fileContent = new StringBuilder();
      
              try (FileReader fileReader = new FileReader(filePath);
                   Scanner scanner = new Scanner(fileReader)) {
      
                  // Reading the file content
                  while (scanner.hasNextLine()) {
                      String line = scanner.nextLine();
                      fileContent.append(line).append(System.lineSeparator());
                  }
              }
              return fileContent.toString();
          }
      }
    learner_created: true
  - name: src/readability/commandLine/CommandLineValidator.java
    visible: true
    text: |
      package readability.commandLine;
      
      public class CommandLineValidator {
      
          public static boolean isValidArgument(int arguments) {
      
              return arguments > 0;
          }
      }
    learner_created: true
  - name: src/readability/Regex/WordRegex.java
    visible: true
    text: |
      package readability.Regex;
      
      public class WordRegex {
          // INSTANCE VARIABLES
          private static String wordRegex = "[a-zA-Z0-9]+";
      
          // GETTERS AND SETTERS
      
      
          public static String getWordRegex() {
              return wordRegex;
          }
      
          public static void setWordRegex(String wordRegex) {
              WordRegex.wordRegex = wordRegex;
          }
      }
    learner_created: true
  - name: src/readability/io/input/UserInputManager.java
    visible: true
    text: |
      package readability.io.input;
      
      import java.util.Scanner;
      
      public class UserInputManager {
          // INSTANCE VARIABLES
          private static Scanner SCANNER = new Scanner(System.in);
      
          /**
           * Returns the user input as a string.
           *
           * @return The user input as a string.
           */
          public static String getUserInputString() {
              return SCANNER.nextLine();
          }
      
          /**
           * Closes the scanner.
           */
          public static void closeScanner() {
              SCANNER.close();
          }
      }
    learner_created: true
  - name: src/readability/calculate/FleschKincaid.java
    visible: true
    learner_created: true
  - name: src/readability/calculate/Syllables.java
    visible: true
    learner_created: true
  - name: src/readability/Regex/VowelsRegex.java
    visible: true
    learner_created: true
  - name: src/readability/calculate/SMOGIndex.java
    visible: true
    learner_created: true
  - name: src/readability/calculate/PolySyllables.java
    visible: true
    learner_created: true
  - name: src/readability/menu/ScoreChoiceMenu.java
    visible: true
    learner_created: true
  - name: src/readability/calculate/ColemanLiauIndex.java
    visible: true
    learner_created: true
  - name: src/readability/calculate/AvgCharactersPer100Words.java
    visible: true
    learner_created: true
  - name: src/readability/calculate/AverageSentencesPer100Words.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5265#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 06 Aug 2024 11:45:10 UTC"
record: -1
